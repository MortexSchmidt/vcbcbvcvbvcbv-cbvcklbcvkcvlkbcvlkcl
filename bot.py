# -*- coding: utf-8 -*-
"""
üî• —Ö–µ—Å—É—Å –∏–Ω—Å–∞–π–¥–±–æ—Ç üî•

ü§ñ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ —Ö–µ—Å—É—Å –∏–Ω—Å–∞–π–¥
üì∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∏–º–æ–≤ –Ω–∞ kick.com
üõ°Ô∏è —É–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞
üí∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç

üíª —Å–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –¥–ª—è —Ö–µ—Å—É—Å –∏–Ω—Å–∞–π–¥–∞
üë®‚Äçüíª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @TrempelChan
–≤–µ—Ä—Å–∏—è: 2.0 üöÄ
"""

import os
import logging
import re
import asyncio
import requests
import nest_asyncio
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops
nest_asyncio.apply()

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
PORT = int(os.environ.get('PORT', 8080))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
token = "8054283598:AAF-gnozvA6aVgZDL-AoBVdJ6hVqzzq26r8"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞)
user_messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
muted_users = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
previous_stream_status = {}
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö
known_chats = set()

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
user_warnings = {}  # {user_id: {"warnings": count, "violations": [{"type": str, "timestamp": datetime}]}}
admin_ids = [1648720935]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
tictactoe_game = {
    "active": False,
    "board": [" "] * 9,
    "players": [],
    "current_player": 0,
    "message_id": None,
    "chat_id": None
}

# –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def add_warning(user_id: int, violation_type: str, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in user_warnings:
        user_warnings[user_id] = {"warnings": 0, "violations": []}
    
    user_warnings[user_id]["warnings"] += 1
    user_warnings[user_id]["violations"].append({
        "type": violation_type,
        "timestamp": datetime.now()
    })

async def mute_user(user_id: int, chat_id: int, hours: float, reason: str, context: ContextTypes.DEFAULT_TYPE):
    """–ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–∏–Ω—É—Ç)"""
    mute_until = datetime.now() + timedelta(hours=hours)
    muted_users[user_id] = mute_until
    
    try:
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            )
        )
        return True
    except:
        return False

async def ban_user(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
        return True
    except:
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤ (–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
def check_winner(board):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å"""
    win_patterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]

    for pattern in win_patterns:
        if board[pattern[0]] == board[pattern[1]] == board[pattern[2]] != " ":
            return board[pattern[0]]

    if " " not in board:
        return "draw"

    return None

def build_board_keyboard(board, players):
    """–°—Ç—Ä–æ–∏—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ—Å–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            idx = i + j
            cell = board[idx]
            if cell == " ":
                label = "‚ñ´Ô∏è"
                cb = f"tic_pos_{idx}"
            else:
                label = cell
                cb = f"tic_disabled"
            row.append(InlineKeyboardButton(label, callback_data=cb))
        keyboard.append(row)

    # action row
    actions = []
    if len(players) < 2:
        actions.append(InlineKeyboardButton("‚ûï —è –≤", callback_data="tic_join"))
    else:
        actions.append(InlineKeyboardButton("‚õî –ø–∞—Å (—Å–¥–∞—Ç—å—Å—è)", callback_data="tic_forfeit"))

    # —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å
    actions.append(InlineKeyboardButton("üîÑ –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É", callback_data="tic_end"))

    keyboard.append(actions)
    return InlineKeyboardMarkup(keyboard)

def create_board_text(board, players, current_player):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å–∫–∏ —Å –∏–Ω—Ñ–æ–π –ø–æ –∏–≥—Ä–æ–∫–∞–º"""
    symbols = ["‚ùå", "‚≠ï"]
    text = "üéÆ <b>–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ‚Äî –¥–≤–∏–∂ –∑–∞–ø—É—â–µ–Ω</b> üéÆ\n\n"

    if len(players) == 2:
        p0 = players[0].first_name
        p1 = players[1].first_name
        text += f"‚ùå <b>{p0}</b>  ‚Äî  ‚≠ï <b>{p1}</b>\n"
        text += f"üëë —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: {symbols[current_player]} <b>{players[current_player].first_name}</b>\n\n"
    else:
        p0 = players[0].first_name if players else "‚Äî"
        text += f"üìå –±—Ä–æ–Ω—å: <b>{p0}</b>\n"
        text += "‚è≥ –∂–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∑–∞–ª–µ—Ç–∞–µ–º!\n\n"

    # –î–æ—Å–∫–∞ (—Å—Ç—Ä–æ–∫–∏)
    for r in range(3):
        row_cells = []
        for c in range(3):
            val = board[r * 3 + c]
            if val == " ":
                row_cells.append("‚ñ´Ô∏è")
            else:
                row_cells.append(val)
        text += " ".join(row_cells) + "\n"

    text += "\nüí° –∂–º–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É ‚Äî –¥–µ–ª–∞–π —Ö–æ–¥. —Ö–æ—á–µ—à—å –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É? –∂–º–∏ '‚ûï —è –≤' –∏–ª–∏ –ø–∏—à–∏ /join"
    return text

async def update_board_message(context, edit_text=True):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    global tictactoe_game
    try:
        reply_markup = build_board_keyboard(tictactoe_game["board"], tictactoe_game["players"])
        if edit_text:
            await context.bot.edit_message_text(
                chat_id=tictactoe_game["chat_id"],
                message_id=tictactoe_game["message_id"],
                text=create_board_text(tictactoe_game["board"], tictactoe_game["players"], tictactoe_game["current_player"]),
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await context.bot.edit_message_reply_markup(
                chat_id=tictactoe_game["chat_id"],
                message_id=tictactoe_game["message_id"],
                reply_markup=reply_markup
            )
    except Exception:
        pass

async def start_tictactoe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /tictactoe ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –∏–≥—Ä—É"""
    try:
        await update.message.delete()
    except:
        pass

    global tictactoe_game
    if tictactoe_game["active"]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –±—Ä–æ ‚Äî –∂–¥–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é")
        return

    tictactoe_game = {
        "active": True,
        "board": [" "] * 9,
        "players": [update.effective_user],
        "current_player": 0,
        "message_id": None,
        "chat_id": update.effective_chat.id,
        "creator_id": update.effective_user.id
    }

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=create_board_text(tictactoe_game["board"], tictactoe_game["players"], tictactoe_game["current_player"]),
        parse_mode='HTML',
        reply_markup=build_board_keyboard(tictactoe_game["board"], tictactoe_game["players"])    
    )

    tictactoe_game["message_id"] = message.message_id

async def join_tictactoe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /join (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É)"""
    try:
        await update.message.delete()
    except:
        pass

    global tictactoe_game
    if not tictactoe_game["active"]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã ‚Äî –ø–∏—à–∏ /tictactoe, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
        return

    if len(tictactoe_game["players"]) >= 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –∏–≥—Ä–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è")
        return

    if update.effective_user.id in [p.id for p in tictactoe_game["players"]]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ")
        return

    tictactoe_game["players"].append(update.effective_user)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ <b>{update.effective_user.first_name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!", parse_mode='HTML')
    await update_board_message(context)

async def handle_tictactoe_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤ –∏–≥—Ä—ã (—Ö–æ–¥, join, forfeit, end)"""
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    global tictactoe_game
    if not tictactoe_game["active"]:
        await query.edit_message_text("‚ùå –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if data == "tic_join":
        user = query.from_user
        if len(tictactoe_game["players"]) >= 2:
            await query.answer("‚ùå –∏–≥—Ä–∞—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç–æ ‚Äî –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π –æ—á–µ—Ä–µ–¥–∏")
            return
        if user.id in [p.id for p in tictactoe_game["players"]]:
            await query.answer("‚ùå —Ç—ã —É–∂–µ –≤ –∑–∞–π–º–µ")
            return
        tictactoe_game["players"].append(user)
        await query.edit_message_text(create_board_text(tictactoe_game["board"], tictactoe_game["players"], tictactoe_game["current_player"]), parse_mode='HTML', reply_markup=build_board_keyboard(tictactoe_game["board"], tictactoe_game["players"]))
        return

    # –°–¥–∞—Ç—å—Å—è
    if data == "tic_forfeit":
        user = query.from_user
        if user.id not in [p.id for p in tictactoe_game["players"]]:
            await query.answer("‚ùå —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ, –Ω–µ —Ñ–µ–π—å")
            return
        # –ü–æ–±–µ–∂–¥–∞–µ—Ç –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫
        other = [p for p in tictactoe_game["players"] if p.id != user.id]
        winner_text = "<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> " + (other[0].first_name if other else "‚Äî")
        tictactoe_game["active"] = False
        await query.edit_message_text(create_board_text(tictactoe_game["board"], tictactoe_game["players"], tictactoe_game["current_player"]) + "\n\n‚õî –ù–∏—Ö—É—è —Å–µ–±–µ ‚Äî –∏–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è. " + winner_text + " ‚Äî gg", parse_mode='HTML')
        return

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
    if data == "tic_end":
        user = query.from_user
        if user.id != tictactoe_game.get("creator_id") and user.id not in admin_ids:
            await query.answer("‚ùå —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É")
            return
        tictactoe_game["active"] = False
        await query.edit_message_text("üîö –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞. –ü–æ–∫–∞-–ø–æ–∫–∞, –±—Ä–æ.")
        return

    # –•–æ–¥ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    if data.startswith("tic_pos_"):
        # –¢—Ä–µ–±—É–µ—Ç—Å—è 2 –∏–≥—Ä–æ–∫–∞
        if len(tictactoe_game["players"]) < 2:
            await query.answer("‚ùå –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞—Å–∫–æ—á–∏—Ç")
            return

        pos = int(data.split("_")[-1])
        user = query.from_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–π —Ö–æ–¥
        if user.id != tictactoe_game["players"][tictactoe_game["current_player"]].id:
            await query.answer("‚ùå —á—É–≤–∞—á–æ–∫, –Ω–µ —Ç–≤–æ–π —Ö–æ–¥ ‚Äî –æ—Ç–≤–∞–ª–∏ –ø–æ–∫–∞")
            return

        if tictactoe_game["board"][pos] != " ":
            await query.answer("‚ùå –æ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é")
            return

        symbols = ["‚ùå", "‚≠ï"]
        tictactoe_game["board"][pos] = symbols[tictactoe_game["current_player"]]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = check_winner(tictactoe_game["board"])
        if winner:
            if winner == "draw":
                result_text = "ü§ù <b>–ù–ò–ß–¨–Ø!</b> ü§ù\n\n–ü–∞—Ü–∞–Ω—ã, –Ω–∏—á—å—è ‚Äî –ª–æ–ª. üéâ"
            else:
                winner_name = tictactoe_game["players"][tictactoe_game["current_player"]].first_name
                result_text = f"üéâ <b>–ü–û–ë–ï–î–ê!</b> üéâ\n\n{winner} <b>{winner_name}</b> –≤–∑–æ—Ä–≤–∞–ª –¥–æ—Å–∫—É ‚Äî –æ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫! üèÜ"
            tictactoe_game["active"] = False
            await query.edit_message_text(create_board_text(tictactoe_game["board"], tictactoe_game["players"], tictactoe_game["current_player"]) + "\n\n" + result_text, parse_mode='HTML')
            return

        # –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
        tictactoe_game["current_player"] = 1 - tictactoe_game["current_player"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
        await update_board_message(context)
        return

    # –î–µ—Ñ–æ–ª—Ç
    await query.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.first_name} –≤ —á–∞—Ç–µ {update.effective_chat.id}")
    try:
        await update.message.delete()
        logger.info("—Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        pass # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    user_name = update.effective_user.first_name
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    welcome_text = f"""–π–æ—É, {user_name}! ü§ô

ü§ñ —è ‚Äî <b>—Ö–µ—Å—É—Å –∏–Ω—Å–∞–π–¥–±–æ—Ç</b>, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–≤–∏–∂—É.

üéÆ <b>—á–µ —è —É–º–µ—é:</b>
üì∫ —Å–ª–µ–∂—É –∑–∞ —Å—Ç—Ä–∏–º–∞–º–∏ —Ö–µ—Å—É—Å–∞, –Ω–µ –ø—Ä–æ—Å–ø–∏—à—å –ø–æ–¥—Ä—É–±–∫—É
üõ°Ô∏è –º–æ–¥–µ—Ä—É —á–∞—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –≥–∞—à—É —Ç–æ–∫—Å–∏–∫–æ–≤
üí∏ —á–µ–∫–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª –≤ —Ç–µ–º–µ
üéØ –∏–≥—Ä–∞—é –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏, –∫–æ–≥–¥–∞ —Å–∫—É—á–Ω–æ

üéØ <b>–∫–æ–º–∞–Ω–¥—ã:</b>
/stream ‚Äî —á–µ –ø–æ —Å—Ç—Ä–∏–º—É?
/rate ‚Äî —á–µ –ø–æ –±–∞–±–∫–∞–º?
/tictactoe ‚Äî —Å—ã–≥—Ä–∞–µ–º –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏?
/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Å–æ–≤–∫–∏
/myid ‚Äî —Ç–≤–æ–π –∞–π–¥–∏
/help ‚Äî –µ—Å–ª–∏ —á–µ –Ω–µ –ø–æ–Ω—è–ª

üíª <b>—Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Å–≤–æ–∏—Ö</b>
üë®‚Äçüíª <b>–∫–æ–¥–µ—Ä:</b> @TrempelChan

‚ú® <i>–ª–æ–≤–∏ –≤–∞–π–± –∏ —á–∏–ª–ª—å!</i> ‚ú®

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""

    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text, parse_mode='HTML')
    logger.info("–æ—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    user_name = update.effective_user.first_name
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    help_message = f"""üÜò <b>–ø–æ–º–æ—â—å</b> üÜò

üëã –π–æ—É, {user_name}! –≤–æ—Ç —á–µ —è —É–º–µ—é:

üì∫ <b>—Å—Ç—Ä–∏–º—ã:</b>
‚Ä¢ —Å–ª–µ–∂—É –∑–∞ —Ö–µ—Å—É—Å–æ–º –Ω–∞ kick, –Ω–µ –ø—Ä–æ—Å–ø–∏—à—å
‚Ä¢ –∫–∏–¥–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –æ–Ω –æ–Ω–ª–∞–π–Ω
‚Ä¢ /stream - —á–µ–∫–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞

üí∞ <b>–≤–∞–ª—é—Ç–∞:</b>
‚Ä¢ /rate - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ —Ñ–∏–∞—Ç –∏ –∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ

üéÆ <b>–∏–≥—Ä—ã:</b>
‚Ä¢ /tictactoe - –Ω–∞—á–∞—Ç—å –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
‚Ä¢ /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –µ—Å–ª–∏ –∂–¥—ë—Ç –≤—Ç–æ—Ä–æ–π
‚Ä¢ –∂–º–∏ –Ω–∞ –∫–ª–µ—Ç–∫–∏ —á—Ç–æ–±—ã —Ö–æ–¥–∏—Ç—å

üõ°Ô∏è <b>–º–æ–¥–µ—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –∞–≤—Ç–æ-—Ñ–∏–ª—å—Ç—Ä –æ—Ç —Ç–æ–∫—Å–∏–∫–∞
‚Ä¢ –≥–∞—à—É —Å–ø–∞–º –º–æ–º–µ–Ω—Ç–æ–º
‚Ä¢ –º—É—Ç –∑–∞ –∫—Ä–∏–Ω–∂
‚Ä¢ /rules - –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ª–µ—Ç–µ—Ç—å –≤ –±–∞–Ω

üîó <b>—Å—Ç—Ä–∏–º–µ—Ä –∑–¥–µ—Å—å:</b>
<a href="https://kick.com/jesusavgn">kick.com/jesusavgn</a>

üíª <b>—Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã</b>
üë®‚Äçüíª <b>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @TrempelChan

‚ú® <i>–Ω–µ —Ç–æ–∫—Å–∏—á—å, –±—É–¥—å —á–µ–ª–æ–≤–µ–∫–æ–º!</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_message, parse_mode='HTML')

# –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /mute ‚Äî –º—É—Ç —á–µ–ª–∏–∫–∞ (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        help_msg = "üîá –∫–∞–∫ –∫–∏–Ω—É—Ç—å –≤ –º—É—Ç: —Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂ –∏ /mute [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] (30–º, 2—á, 1–¥ –∏–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ = 1—á)"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=help_msg)
        return

    user_id = update.message.reply_to_message.from_user.id
    chat_id = update.effective_chat.id

    # –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    hours = 0
    minutes = 0
    reason = "–∑–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"
    if context.args:
        time_arg = context.args[0]
        reason = " ".join(context.args[1:]) if len(context.args) > 1 else reason
        try:
            if time_arg.endswith('—á') or time_arg.endswith('h'):
                hours = int(time_arg[:-1])
            elif time_arg.endswith('–º') or time_arg.endswith('m'):
                minutes = int(time_arg[:-1])
            elif time_arg.endswith('–¥') or time_arg.endswith('d'):
                hours = int(time_arg[:-1]) * 24
            else:
                minutes = int(time_arg)
        except:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –∫—Ä–∏–Ω–∂–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –≥–æ —Ç–∞–∫: 30–º, 2—á, 1–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
            return

    total_hours = hours + (minutes / 60.0)
    success = await mute_user(user_id, chat_id, total_hours, reason, context)
    if success:
        time_str = f"{hours}—á " if hours else ""
        if minutes:
            time_str += f"{minutes}–º"
        if not time_str:
            time_str = "1—á"
        mute_msg = f"üîá —á–µ–ª –≤ –º—É—Ç–µ: {update.message.reply_to_message.from_user.mention_html()}\n‚è∞ —Å—Ä–æ–∫: {time_str.strip()}\nüìù –ø—Ä–∏—á–∏–Ω–∞: {reason}\nüë®‚Äçüíº –∞–¥–º–∏–Ω: {update.effective_user.mention_html()}"
        await context.bot.send_message(chat_id=chat_id, text=mute_msg, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å (–º–± –æ–Ω –∞–¥–º–∏–Ω –∏–ª–∏ —É –º–µ–Ω—è –ª–∞–ø–∫–∏)")


async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /ban ‚Äî –±–∞–Ω (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å, –Ω—É")
        return

    user_id = update.message.reply_to_message.from_user.id
    chat_id = update.effective_chat.id
    success = await ban_user(user_id, chat_id, context)
    if success:
        await context.bot.send_message(chat_id=chat_id, text="üî® —á–µ–ª –æ—Ç–ª–µ—Ç–µ–ª –≤ –±–∞–Ω. f")
    else:
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å, —Ö–∑ –ø–æ—á–µ–º—É")


async def warn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /warn ‚Äî –≤—ã–ø–∏—Å–∞—Ç—å –≤–∞—Ä–Ω (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω")
        return

    user_id = update.message.reply_to_message.from_user.id
    violation_type = " ".join(context.args) if context.args else "–∑–∞ –∫—Ä–∏–Ω–∂"
    await add_warning(user_id, violation_type, context)
    warnings_count = user_warnings[user_id]["warnings"]
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ö†Ô∏è –≤—ã–ø–∏—Å–∞–ª –≤–∞—Ä–Ω. —Ç–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –∏—Ö {warnings_count}")


async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /userinfo ‚Äî –∏–Ω—Ñ–∞ –ø–æ —á–µ–ª—É (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã —á–µ–∫–Ω—É—Ç—å –∏–Ω—Ñ—É")
        return

    user = update.message.reply_to_message.from_user
    user_id = user.id
    user_name = user.first_name
    username = user.username or "–ø—É—Å—Ç–æ"

    warnings = user_warnings.get(user_id, {})
    warnings_count = warnings.get("warnings", 0)
    violations = warnings.get("violations", [])

    mute_status = "–Ω–µ –≤ –º—É—Ç–µ"
    if user_id in muted_users:
        mute_end = muted_users[user_id]
        if datetime.now() < mute_end:
            remaining = mute_end - datetime.now()
            hours = remaining.total_seconds() // 3600
            minutes = (remaining.total_seconds() % 3600) // 60
            mute_status = f"–≤ –º—É—Ç–µ –µ—â–µ {int(hours)}—á {int(minutes)}–º"

    recent_violations = violations[-3:] if violations else []
    violations_text = ""
    for v in recent_violations:
        violations_text += f"‚Ä¢ {v['type']} ({v['timestamp'].strftime('%d.%m.%Y %H:%M')})\n"
    if not violations_text:
        violations_text = "—á–∏—Å—Ç, –∫–∞–∫ —Å–ª–µ–∑–∞"

    info_msg = f"üë§ –∏–Ω—Ñ–∞ –ø–æ —á–µ–ª—É:\n–Ω–∏–∫: {user_name}\n—é–∑–µ—Ä–Ω–µ–π–º: @{username}\nid: {user_id}\n–≤–∞—Ä–Ω—ã: {warnings_count}\n—Å—Ç–∞—Ç—É—Å –º—É—Ç–∞: {mute_status}\n\n–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ—Å—è–∫–∏:\n{violations_text}"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=info_msg, parse_mode='HTML')


async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /unmute ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã —Ä–∞–∑–º—É—Ç–∏—Ç—å")
        return

    user_id = update.message.reply_to_message.from_user.id
    if user_id in muted_users:
        del muted_users[user_id]
        unmute_msg = f"üîä {update.message.reply_to_message.from_user.mention_html()} —Ä–∞–∑–º—É—á–µ–Ω. –∞–¥–º–∏–Ω: {update.effective_user.mention_html()}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=unmute_msg, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå {update.message.reply_to_message.from_user.first_name} –∏ —Ç–∞–∫ –Ω–µ –≤ –º—É—Ç–µ, –ª–æ–ª")


async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /unban ‚Äî —Ä–∞–∑–±–∞–Ω (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã —Ä–∞–∑–±–∞–Ω–∏—Ç—å")
        return

    user_id = update.message.reply_to_message.from_user.id
    chat_id = update.effective_chat.id
    try:
        await context.bot.unban_chat_member(chat_id, user_id)
        unban_msg = f"‚úÖ {update.message.reply_to_message.from_user.mention_html()} –∞–º–Ω–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω. –∞–¥–º–∏–Ω: {update.effective_user.mention_html()}"
        await context.bot.send_message(chat_id=chat_id, text=unban_msg, parse_mode='HTML')
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå —Ç—Ä–∞–±–ª—ã —Å —Ä–∞–∑–±–∞–Ω–æ–º: {str(e)}")


async def clear_warnings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–æ–º–∞–Ω–¥–∞ /clearwarns ‚Äî —Å–Ω–µ—Å—Ç–∏ –≤–∞—Ä–Ω—ã (–∞–¥–º–∏–Ω–∞–º)"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    if not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="—Ä–µ–ø–ª–∞–π –Ω–∞ –º–µ—Å—Å–µ–¥–∂, —á—Ç–æ–±—ã —Å–Ω–µ—Å—Ç–∏ –≤–∞—Ä–Ω—ã")
        return

    user_id = update.message.reply_to_message.from_user.id
    if user_id in user_warnings:
        del user_warnings[user_id]
        clear_msg = f"üßπ –≤–∞—Ä–Ω—ã —Å–Ω–µ—Å–µ–Ω—ã –¥–ª—è {update.message.reply_to_message.from_user.mention_html()}\n–∞–¥–º–∏–Ω: {update.effective_user.mention_html()}"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=clear_msg, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå —É {update.message.reply_to_message.from_user.first_name} –∏ —Ç–∞–∫ –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤, –∞–ª–µ")


async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—É"""
    try:
        await update.message.delete()
    except:
        pass

    if update.effective_user.id not in admin_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå —Å–æ—Ä–∏, –±—Ä–æ, –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        return

    admin_help_msg = "üîß –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n/mute, /unmute, /ban, /unban, /warn, /clearwarns, /userinfo"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=admin_help_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text or ""
    chat_id = update.effective_chat.id

    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö
    global known_chats
    known_chats.add(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ
    if user_id in muted_users:
        mute_end_time = muted_users[user_id]
        if datetime.now() < mute_end_time:
            try:
                await update.message.delete()
            except:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
            return
        else:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ
            del muted_users[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞
    
    # –ü—Ä–∞–≤–∏–ª–æ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥ (3+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è)
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –µ—Å—Ç—å –Ω–∏–∂–µ –≤ –∫–æ–¥–µ
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å:
    
    # –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–†–ê–¶–ò–ò –ü–û –ü–†–ê–í–ò–õ–ê–ú –ß–ê–¢–ê
    
    # –ü—Ä–∞–≤–∏–ª–æ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    personal_info_patterns = [
        r'\+?\d{10,15}',  # –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        r'\b\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\b',  # –ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç
        r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
        r'(?:–ø–∞—Å–ø–æ—Ä—Ç|—Å–Ω–∏–ª—Å|–∏–Ω–Ω)\s*:?\s*\d+',  # –î–æ–∫—É–º–µ–Ω—Ç—ã
        r'(?:–∂–∏–≤–µ—Ç|–∞–¥—Ä–µ—Å|–ø—Ä–æ–∂–∏–≤–∞–µ—Ç)\s+(?:–ø–æ|–Ω–∞)\s+[–ê-–Ø–∞-—è\s\d,.-]+',  # –ê–¥—Ä–µ—Å–∞
    ]
    
    for pattern in personal_info_patterns:
        if re.search(pattern, message_text, re.IGNORECASE):
            if user_id not in admin_ids:
                # –ü—Ä–∞–≤–∏–ª–æ 1: –ü–µ—Ä–º–∞—á –∑–∞ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await ban_user(user_id, chat_id, context)
                ban_msg = f"""üî® <b>–ü–ï–†–ú–ê–ß</b> üî®

{update.effective_user.mention_html()} –æ—Ç–ª–µ—Ç–µ–ª –≤ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 1:</b> —Å–ª–∏–≤ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ—ã
üîí <b>–í–µ—Ä–¥–∏–∫—Ç:</b> –ø–µ—Ä–º–∞—á

üìã <i>–∞–ø–µ–ª–ª—è—Ü–∏–∏? –ø–∏—à–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É —Ç–≥-–∫–∞–Ω–∞–ª–∞, –º–± –ø–æ–º–æ–≥—É—Ç</i>"""
                
                await update.message.reply_text(ban_msg, parse_mode='HTML')
                await update.message.delete()
                return
    
    # –ü—Ä–∞–≤–∏–ª–æ 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    ad_indicators = [
        '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '–ø–µ—Ä–µ—Ö–æ–¥–∏', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è',
        '–ø—Ä–æ–¥–∞—é', '–∫—É–ø–∏—Ç—å', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
        '–∫–∞–Ω–∞–ª', '–≥—Ä—É–ø–ø–∞', '—á–∞—Ç', '–±–æ—Ç', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–º–æ–∫–æ–¥'
    ]
    
    has_link = any(x in message_text.lower() for x in ['http', 't.me/', '@', 'www.'])
    has_ad_words = any(word in message_text.lower() for word in ad_indicators)
    
    if has_link and has_ad_words and user_id not in admin_ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¢–ì-–∫–∞–Ω–∞–ª–∞
        if not (message_text.startswith('Forwarded from') or update.message.forward_from_chat):
            await ban_user(user_id, chat_id, context)
            ban_msg = f"""üî® <b>–ü–ï–†–ú–ê–ß</b> üî®

{update.effective_user.mention_html()} –æ—Ç–ª–µ—Ç–µ–ª –≤ –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 2:</b> —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ –∞–ø—Ä—É–≤–∞
üîí <b>–í–µ—Ä–¥–∏–∫—Ç:</b> –ø–µ—Ä–º–∞—á

üí° <i>–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: —Ä–µ–ø–æ—Å—Ç—ã –∏–∑ —Å–≤–æ–µ–≥–æ —Ç–≥-–∫–∞–Ω–∞–ª–∞ (–Ω–µ —Å–∫–∞–º)</i>"""
            
            await update.message.reply_text(ban_msg, parse_mode='HTML')
            await update.message.delete()
            return
    
    # –ü—Ä–∞–≤–∏–ª–æ 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –û–¢–ö–õ–Æ–ß–ï–ù–û
    # aggression_words = [
    #     '–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫', '—Ç—É–ø–æ–π', '–¥–µ–±–∏–ª', '—É—Ä–æ–¥', '—É–µ–±–æ–∫', '—Å—É–∫–∞',
    #     '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞—Ö—É–π', '–æ—Ç–≤–∞–ª–∏', '–∑–∞—Ç–∫–Ω–∏—Å—å', '—Å–¥–æ—Ö–Ω–∏'
    # ]
    # 
    # if any(word in message_text.lower() for word in aggression_words):
    #     await add_warning(user_id, "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", context)
    #     warnings = user_warnings.get(user_id, {}).get("warnings", 0)
    #     
    #     if warnings == 1:
    #         # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –º—É—Ç –Ω–∞ 1 —á–∞—Å
    #         success = await mute_user(user_id, chat_id, 1, "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", context)
    #         if success:
    #             mute_msg = f"""üîá <b>–ú–£–¢ –ù–ê 1 –ß–ê–°</b> üîá
    #
    # {update.effective_user.mention_html()} –ø–æ–ª—É—á–∏–ª –º—É—Ç
    #
    # üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 3:</b> –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    # ‚è∞ <b>–°—Ä–æ–∫:</b> 1 —á–∞—Å
    #
    # ‚ö†Ô∏è <i>–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø–µ—Ä–º–∞—á—É</i>"""
    #             
    #             await update.message.reply_text(mute_msg, parse_mode='HTML')
    #     elif warnings >= 3:
    #         # –¢—Ä–µ—Ç—å–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –ø–µ—Ä–º–∞—á
    #         await ban_user(user_id, chat_id, context)
    #         ban_msg = f"""üî® <b>–ü–ï–†–ú–ê–ß</b> üî®
    #
    # {update.effective_user.mention_html()} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
    #
    # üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 3:</b> –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    # üîí <b>–ù–∞–∫–∞–∑–∞–Ω–∏–µ:</b> –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω
    # """
    #         
    #         await update.message.reply_text(ban_msg, parse_mode='HTML')
    #         return

    # –ü—Ä–∞–≤–∏–ª–æ 5: –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è
    discrimination_words = [
        '—Ö–æ—Ö–æ–ª', '–º–æ—Å–∫–∞–ª—å', '–∂–∏–¥', '—á–µ—Ä–Ω–æ–º–∞–∑—ã–π', '—á—É—Ä–∫–∞', '—É–∑–∫–æ–≥–ª–∞–∑—ã–π',
        '–ø–µ–¥–∏–∫', '–ø–∏–¥–æ—Ä', '–ª–µ—Å–±–∏—è–Ω–∫–∞', '—Ç—Ä–∞–Ω—Å–≤–µ—Å—Ç–∏—Ç', '–∏–∑–≤—Ä–∞—â–µ–Ω–µ—Ü',
        '–Ω–µ–≥—Ä', '–Ω–∏–≥–≥–µ—Ä', '—á–µ—Ä–Ω–æ–∫–æ–∂–∏–π —É–±–ª—é–¥–æ–∫', '–∞–∑–∏–∞—Ç', '–∫–∞–≤–∫–∞–∑–µ—Ü'
    ]
    
    if any(word in message_text.lower() for word in discrimination_words):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –µ—Å–ª–∏ —ç—Ç–æ —à—É—Ç–∫–∞ –º–µ–∂–¥—É –¥—Ä—É–∑—å—è–º–∏, –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
        await add_warning(user_id, "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", context)
        success = await mute_user(user_id, chat_id, 12, "–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", context)
        
        if success:
            mute_msg = f"""üîá <b>–ú–£–¢ –ù–ê 12 –ß–ê–°–û–í</b> üîá

{update.effective_user.mention_html()} —Å–ª–æ–≤–∏–ª –º—É—Ç

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 5:</b> –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
‚è∞ <b>–°—Ä–æ–∫:</b> 12 —á–∞—Å–æ–≤

‚ö†Ô∏è <i>–ø–æ–≤—Ç–æ—Ä–∏—à—å - –æ—Ç–ª–µ—Ç–∏—à—å –≤ –ø–µ—Ä–º–∞—á, –±—Ä–æ</i>"""
            
            await update.message.reply_text(mute_msg, parse_mode='HTML')
    
    # –ü—Ä–∞–≤–∏–ª–æ 7: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
    fraud_words = [
        '–æ–±–º–∞–Ω', '–∫–∏–Ω—É–ª', '–∫–∏–¥–∞–ª–æ–≤–æ', '–º–æ—à–µ–Ω–Ω–∏–∫', '—Ä–∞–∑–≤–æ–¥', '–ª–æ—Ö–æ—Ç—Ä–æ–Ω',
        '–¥–∞–π –≤ –¥–æ–ª–≥', '–æ–¥–æ–ª–∂–∏', '–ø–µ—Ä–µ–≤–µ–¥–∏', '—Å–∫–∏–Ω—å –¥–µ–Ω—å–≥–∏', '–ø–æ–º–æ–≥–∏ –¥–µ–Ω—å–≥–∞–º–∏'
    ]
    
    if any(word in message_text.lower() for word in fraud_words):
        await ban_user(user_id, chat_id, context)
        ban_msg = f"""üî® <b>–°–ö–ê–ú–ï–† –û–¢–õ–ï–¢–ï–õ –í –ë–ê–ù</b> üî®

{update.effective_user.mention_html()} –∑–∞—Å–∫–∞–º–ª–µ–Ω –∏ –∑–∞–±–∞–Ω–µ–Ω

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 7:</b> –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞–º–∞
üîí <b>–í–µ—Ä–¥–∏–∫—Ç:</b> –ø–µ—Ä–º–∞—á –±–µ–∑ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–º–±—ç–∫
"""
        
        await update.message.reply_text(ban_msg, parse_mode='HTML')
        return
    
    # –ü—Ä–∞–≤–∏–ª–æ 8: –®–∞–Ω—Ç–∞–∂
    blackmail_words = [
        '—à–∞–Ω—Ç–∞–∂', '—É–≥—Ä–æ–∂–∞—é', '—Ä–∞—Å—Å–∫–∞–∂—É –≤—Å–µ–º', '–æ–ø—É–±–ª–∏–∫—É—é', '—Ä–∞–∑–æ–±–ª–∞—á—É',
        '–µ—Å–ª–∏ –Ω–µ', '–∏–Ω–∞—á–µ —è', '–∫–æ–º–ø—Ä–æ–º–∞—Ç', '—É–≥—Ä–æ–∑–∞'
    ]
    
    if any(word in message_text.lower() for word in blackmail_words):
        await ban_user(user_id, chat_id, context)
        ban_msg = f"""üî® <b>–®–ê–ù–¢–ê–ñ–ò–°–¢ –û–¢–õ–ï–¢–ï–õ –í –ë–ê–ù</b> üî®

{update.effective_user.mention_html()} –∑–∞–±–∞–Ω–µ–Ω –±–µ–∑ —à–∞–Ω—Å–æ–≤

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 8:</b> —à–∞–Ω—Ç–∞–∂ –∏ —É–≥—Ä–æ–∑—ã
üîí <b>–í–µ—Ä–¥–∏–∫—Ç:</b> –ø–µ—Ä–º–∞—á –±–µ–∑ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–º–±—ç–∫
"""
        
        await update.message.reply_text(ban_msg, parse_mode='HTML')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º (–ø—Ä–∞–≤–∏–ª–æ 6 —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–∏–∂–µ)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è)
    if user_id not in user_messages:
        user_messages[user_id] = {"messages": [], "timestamps": []}
    
    current_time = datetime.now()
    user_messages[user_id]["messages"].append(message_text)
    user_messages[user_id]["timestamps"].append(current_time)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
    user_messages[user_id]["messages"] = [
        msg for i, msg in enumerate(user_messages[user_id]["messages"]) 
        if current_time - user_messages[user_id]["timestamps"][i] < timedelta(minutes=1)
    ]
    user_messages[user_id]["timestamps"] = [
        ts for ts in user_messages[user_id]["timestamps"] 
        if current_time - ts < timedelta(minutes=1)
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    user_msg_list = user_messages[user_id]["messages"]
    if len(user_msg_list) >= 3:
        last_3_messages = user_msg_list[-3:]
        if len(set(last_3_messages)) == 1:  # –í—Å–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 10 –º–∏–Ω—É—Ç
            mute_until = datetime.now() + timedelta(minutes=10)
            muted_users[user_id] = mute_until
            
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user_id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_media_messages=False,
                        can_send_polls=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False,
                        can_change_info=False,
                        can_invite_users=False,
                        can_pin_messages=False
                    )
                )
                
                mute_message = f"""üîá <b>–°–õ–û–í–ò–õ –ú–£–¢ –ó–ê –°–ü–ê–ú</b> üîá

üö´ {update.effective_user.mention_html()} –æ—Ç–ª–µ—Ç–∞–µ—Ç –≤ –º—É—Ç –Ω–∞ <b>10 –º–∏–Ω—É—Ç</b>

‚ö° –ü—Ä–∏—á–∏–Ω–∞: —Å–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –º–µ—Å—Å–µ–¥–∂–∞–º–∏
‚è∞ –í—Ä–µ–º—è: 10 –º–∏–Ω—É—Ç

ü§ê <i>–ø–æ—Å–∏–¥–∏, –ø–æ–¥—É–º–∞–π –Ω–∞–¥ —Å–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º</i>"""
                
                await update.message.reply_text(mute_message, parse_mode='HTML')
            except:
                pass  # –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º –≤–∏–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
    sticker = update.message.sticker
    if sticker:
        sticker_id = sticker.file_id
        if "stickers" not in user_messages[user_id]:
            user_messages[user_id]["stickers"] = []
            user_messages[user_id]["sticker_timestamps"] = []
        
        user_messages[user_id]["stickers"].append(sticker_id)
        user_messages[user_id]["sticker_timestamps"].append(current_time)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        user_messages[user_id]["stickers"] = [
            sid for i, sid in enumerate(user_messages[user_id]["stickers"]) 
            if current_time - user_messages[user_id]["sticker_timestamps"][i] < timedelta(minutes=1)
        ]
        user_messages[user_id]["sticker_timestamps"] = [
            ts for ts in user_messages[user_id]["sticker_timestamps"] 
            if current_time - ts < timedelta(minutes=1)
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ–¥—Ä—è–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        user_sticker_list = user_messages[user_id]["stickers"]
        if len(user_sticker_list) >= 3:
            last_3_stickers = user_sticker_list[-3:]
            if len(set(last_3_stickers)) == 1:  # –í—Å–µ 3 —Å—Ç–∏–∫–µ—Ä–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 10 –º–∏–Ω—É—Ç
                mute_until = datetime.now() + timedelta(minutes=10)
                muted_users[user_id] = mute_until
                
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                    await context.bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        permissions=ChatPermissions(
                            can_send_messages=False,
                            can_send_media_messages=False,
                            can_send_polls=False,
                            can_send_other_messages=False,
                            can_add_web_page_previews=False,
                            can_change_info=False,
                            can_invite_users=False,
                            can_pin_messages=False
                        )
                    )
                    
                    sticker_mute_message = f"""üîá <b>–°–õ–û–í–ò–õ –ú–£–¢ –ó–ê –°–¢–ò–ö–ï–†–´</b> üîá

üö´ {update.effective_user.mention_html()} –æ—Ç–ª–µ—Ç–∞–µ—Ç –≤ –º—É—Ç –Ω–∞ <b>10 –º–∏–Ω—É—Ç</b>

‚ö° –ü—Ä–∏—á–∏–Ω–∞: —Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏
‚è∞ –í—Ä–µ–º—è: 10 –º–∏–Ω—É—Ç

ü§ê <i>—Ö–≤–∞—Ç–∏—Ç —Ñ–ª—É–¥–∏—Ç—å, –±—Ä–æ</i>"""
                    
                    await update.message.reply_text(sticker_mute_message, parse_mode='HTML')
                except:
                    pass  # –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞

    # –ü—Ä–∞–≤–∏–ª–∞ 9.1, 9.2, 9.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    
    # –ü—Ä–∞–≤–∏–ª–æ 9.1: NSFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º—É—Ç –Ω–∞ 12 —á–∞—Å–æ–≤)
    if update.message.photo:
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ä—É—á–Ω—É—é
        if user_id not in admin_ids:
            await add_warning(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)", context)
            
    # –ü—Ä–∞–≤–∏–ª–æ 9.2: –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö (–ø–µ—Ä–º–∞—á)
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ - –Ω—É–∂–Ω–∞ AI –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    # –ü—Ä–∞–≤–∏–ª–æ 9.3: –ì—Ä–æ–º–∫–∏–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ (–º—É—Ç –Ω–∞ 12 —á–∞—Å–æ–≤)
    if update.message.video or update.message.audio or update.message.voice:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≥—Ä–æ–º–∫–∏—Ö –∑–≤—É–∫–æ–≤
        caption = (update.message.caption or "").lower()
        filename = ""
        
        if update.message.video and update.message.video.file_name:
            filename = update.message.video.file_name.lower()
        elif update.message.audio and update.message.audio.file_name:
            filename = update.message.audio.file_name.lower()
            
        loud_indicators = ['–∫—Ä–∏–∫', '–æ—Ä–µ—Ç', '–≥—Ä–æ–º–∫–æ', '–∑–≤—É–∫', 'bass', 'loud', 'scream']
        
        if any(word in caption + filename for word in loud_indicators):
            success = await mute_user(user_id, chat_id, 12, "–ì—Ä–æ–º–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", context)
            if success:
                loud_msg = f"""üîá <b>–ú–£–¢ –ù–ê 12 –ß–ê–°–û–í</b> üîá

{update.effective_user.mention_html()} —Å–ª–æ–≤–∏–ª –º—É—Ç

üö´ <b>–ü—Ä–∞–≤–∏–ª–æ 9.3:</b> –≥—Ä–æ–º–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —É—à–∏ –≤—è–Ω—É—Ç
‚è∞ <b>–°—Ä–æ–∫:</b> 12 —á–∞—Å–æ–≤
"""
                
                await update.message.reply_text(loud_msg, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_exchange_rate():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å Fixer API
        response = requests.get("https://api.fixer.io/latest?base=USD&symbols=EUR,RUB,UAH")
        
        # –ï—Å–ª–∏ Fixer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
        if response.status_code != 200:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            response = requests.get("https://api.currencyapi.com/v3/latest?apikey=cur_live_demo&base_currency=USD&currencies=EUR,RUB,UAH")
            
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API —Å —á–∞—Å—Ç—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        if response.status_code != 200:
            # FreeCurrencyAPI - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
            response = requests.get("https://api.freecurrencyapi.com/v1/latest?apikey=fca_live_demo&base_currency=USD&currencies=EUR,RUB,UAH")
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π API
        if response.status_code != 200:
            response = requests.get("https://api.exchangerate-api.com/v4/latest/USD")
            
        data = response.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        if "rates" in data:
            rates_data = data["rates"]
        elif "data" in data:
            rates_data = data["data"]
        else:
            rates_data = data
        
        rates = {
            "USD": 1.0,
            "EUR": rates_data.get("EUR", 0.92),
            "RUB": rates_data.get("RUB", 95.0),
            "UAH": rates_data.get("UAH", 37.0),
            "BTC": 0,
            "ETH": 0
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        crypto_response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd")
        crypto_data = crypto_response.json()
        rates["BTC"] = crypto_data["bitcoin"]["usd"]
        rates["ETH"] = crypto_data["ethereum"]["usd"]
        
        return rates
    except:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –µ—Å–ª–∏ –≤—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        return {
            "USD": 1.0,
            "EUR": 0.92,
            "RUB": 95.0,
            "UAH": 37.0,
            "BTC": 65000,
            "ETH": 2500
        }

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate
async def exchange_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass  # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    user_name = update.effective_user.first_name
    rates = get_exchange_rate()

    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    if rates:
        rate_message = f"""üí∞ <b>–∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</b> üí∞

üëã {user_name}, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:

üåç <b>—Ñ–∏–∞—Ç:</b>
üíµ USD: <b>{rates['EUR']:.2f}‚Ç¨</b>
üí∂ EUR: <b>{1/rates['EUR']:.2f}$</b>

üá∑üá∫ <b>—Ä—É–±–ª–∏:</b>
‚Ä¢ <b>{rates['RUB']:.0f}</b> —Ä—É–± = 1$
‚Ä¢ <b>{rates['RUB']*rates['EUR']:.0f}</b> —Ä—É–± = 1‚Ç¨

üá∫üá¶ <b>–≥—Ä–∏–≤–Ω—ã:</b>
‚Ä¢ <b>{rates['UAH']:.0f}</b> –≥—Ä–Ω = 1$
‚Ä¢ <b>{rates['UAH']*rates['EUR']:.0f}</b> –≥—Ä–Ω = 1‚Ç¨

üöÄ <b>–∫—Ä–∏–ø—Ç–∞:</b>
‚Çø BTC: <b>${rates['BTC']:,.0f}</b>
‚ü† ETH: <b>${rates['ETH']:,.0f}</b>

‚ö° <i>–∫—É—Ä—Å—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!</i>
üîÑ <i>—Ñ–∏–∞—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω, –∫—Ä–∏–ø—Ç–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
        
        await context.bot.send_message(chat_id=update.effective_chat.id, text=rate_message, parse_mode='HTML')
    else:
        error_message = f"""‚ùå <b>–æ—à–∏–±–∫–∞, –≤—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—å</b> ‚ùå

üòÖ —Å–æ—Ä–∏, {user_name}, –Ω–µ –º–æ–≥—É —á–µ–∫–Ω—É—Ç—å –∫—É—Ä—Å—ã

üîÑ –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
üåê –º–± –∞–ø–∏—à–∫–∞ –ª–µ–≥–ª–∞, —Ö–∑

‚è∞ <i>–≥–æ –ø–æ–∑–∂–µ</i>"""
        
        await update.message.reply_text(error_message, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞ –Ω–∞ KICK
def check_kick_stream():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫–Ω–µ–π–º jesusavgn —Å Kick.com
        username = "jesusavgn"
        response = requests.get(f"https://kick.com/api/v1/channels/{username}")
        data = response.json()
        
        if "livestream" in data and data["livestream"] is not None:
            return True, data["livestream"]["title"] if "title" in data["livestream"] else "–°—Ç—Ä–∏–º –≤ —ç—Ñ–∏—Ä–µ!"
        else:
            return False, ""
    except:
        return False, ""

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
async def check_stream(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass  # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    user_name = update.effective_user.first_name
    is_live, stream_title = check_kick_stream()

    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    if is_live:
        stream_message = f"""üî¥ <b>—Å—Ç—Ä–∏–º –æ–Ω–ª–∞–π–Ω!</b> üî¥

üëã {user_name}, —Ö–µ—Å—É—Å –≤ —ç—Ñ–∏—Ä–µ!

üé¨ <b>{stream_title}</b>

üöÄ <b>–∑–∞—Ö–æ–¥–∏ —Å–∫–æ—Ä–µ–µ:</b>
üîó <a href="https://kick.com/jesusavgn">kick.com/jesusavgn</a>

‚ö° <i>–≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–º!</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
    else:
        stream_message = f"""‚ö´ <b>—Å—Ç—Ä–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω</b> ‚ö´

üò¥ {user_name}, —Ö–µ—Å—É—Å –æ—Ç–¥—ã—Ö–∞–µ—Ç

üìÖ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
üîî —É–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è

üì∫ <b>–∫–∞–Ω–∞–ª –∑–¥–µ—Å—å:</b>
üîó <a href="https://kick.com/jesusavgn">kick.com/jesusavgn</a>

üí§ <i>—É–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∏–º–µ, –±—Ä–∞—Ç</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=stream_message, parse_mode='HTML')

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ
async def send_stream_notification(application: Application):
    is_live, stream_title = check_kick_stream()

    if is_live:
        if not previous_stream_status.get("live", False):
            # —Å—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            stream_notification = f"""üî¥üî¥ <b>—Å—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!</b> üî¥üî¥üî¥

üéâ <b>—Ö–µ—Å—É—Å –≤ —ç—Ñ–∏—Ä–µ!</b> üéâ

üé¨ <b>{stream_title}</b>

üöÄ <b>–∑–∞—Ö–æ–¥–∏ –±—ã—Å—Ç—Ä–µ–π:</b>
üîó <a href="https://kick.com/jesusavgn">kick.com/jesusavgn</a>

üî• <i>–∫–æ–Ω—Ç–µ–Ω—Ç –∏–¥—ë—Ç!</i>
üçø <i>–Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!</i>

@everyone ‚ö° –∏–¥–∏ –Ω–∞ —Å—Ç—Ä–∏–º!"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã
            global known_chats
            for chat_id in known_chats:
                try:
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=stream_notification,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await application.bot.send_message(
                        chat_id=admin_id,
                        text=f"üî¥ <b>—Å—Ç—Ä–∏–º —Ö–µ—Å—É—Å–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!</b> üî¥\n\nüé¨ {stream_title}\nüîó https://kick.com/jesusavgn",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            previous_stream_status["live"] = True
            previous_stream_status["title"] = stream_title
            logger.info(f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {len(known_chats)} —á–∞—Ç–æ–≤ –∏ {len(admin_ids)} –∞–¥–º–∏–Ω–æ–≤")
    else:
        previous_stream_status["live"] = False
        previous_stream_status["title"] = ""

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass  # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    admin_message = f"""üîß <b>—Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–∞</b> üîß

üë®‚Äçüíª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ–Ω–ª–∏:

üÜî <b>ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞:</b>
<code>{chat_id}</code>

‚öôÔ∏è <b>–≥–∞–π–¥:</b>
1. –∫–æ–ø–∏—Ä—É–π –∞–π–¥–∏—à–Ω–∏–∫
2. –≤—Å—Ç–∞–≤–ª—è–π –≤ –∫–æ–¥
3. –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: chat_id
4. —Ñ—É–Ω–∫—Ü–∏—è: send_stream_notification

üîê <i>–Ω–µ –¥–ª—è –≤—Å–µ—Ö, —Å–∞–º –ø–æ–Ω–∏–º–∞–µ—à—å</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=admin_message, parse_mode='HTML')

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass  # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    username = update.effective_user.username or "–ø—É—Å—Ç–æ"
    chat_id = update.effective_chat.id
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if update.effective_chat.type == 'private':
        chat_type = "–ª–∏—á–∫–∞"
    elif update.effective_chat.type == 'group':
        chat_type = "–≥—Ä—É–ø–ø–∞"
    elif update.effective_chat.type == 'supergroup':
        chat_type = "—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
    elif update.effective_chat.type == 'channel':
        chat_type = "–∫–∞–Ω–∞–ª"
    else:
        chat_type = "—Ö–∑"
    
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    id_message = f"""üÜî <b>—Ç–≤–æ—è –∏–Ω—Ñ–∞</b> üÜî

üë§ <b>—Ç—ã:</b>
üÜî <b>—Ç–≤–æ–π ID:</b> <code>{user_id}</code>
üëã <b>–Ω–∏–∫:</b> {user_name}
üì± <b>—é–∑–µ—Ä–Ω–µ–π–º:</b> @{username}

üí¨ <b>—á–∞—Ç:</b>
üÜî <b>ID —á–∞—Ç–∞:</b> <code>{chat_id}</code>
üìù <b>—Ç–∏–ø —á–∞—Ç–∞:</b> {chat_type}

‚ú® <i>—Å–æ—Ö—Ä–∞–Ω–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ</i>

<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=id_message, parse_mode='HTML')

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π"""
    try:
        await update.message.delete()
    except:
        pass # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    keyboard = [[InlineKeyboardButton("üìã —á–µ–∫–Ω—É—Ç—å –ø—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/pravila-chata-hesus-insajd-02-21")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    user_name = update.effective_user.first_name
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else user_name
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üìã <b>–ø—Ä–∞–≤–∏–ª–∞ '—Ö–µ—Å—É—Å –∏–Ω—Å–∞–π–¥'</b>\n\n"
        "—Ç–∞–ø–Ω–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏:\n\n"
        f"<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

# –∫–æ–º–∞–Ω–¥–∞ –ª–µ–≥–µ–Ω–¥–∞ —á–∞—Ç–∞
async def legend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–≥–µ–Ω–¥—É —á–∞—Ç–∞"""
    try:
        await update.message.delete()
    except:
        pass # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.first_name
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"<b>–ò–õ–¨–Ø–° –ò–ó –ù–ï–§–¢–ï–Æ–ì–ê–ù–°–ö–ê</b>\n\n<i>–≤—ã–∑–≤–∞–ª: {user_mention}</i>",
        parse_mode='HTML'
    )

# —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è job_queue
async def stream_check_job(context: ContextTypes.DEFAULT_TYPE):
    await send_stream_notification(context.application)

def main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è main —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""
    # —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(token).build()

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("stream", "–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞"),
            BotCommand("rate", "–ö—É—Ä—Å –≤–∞–ª—é—Ç"),
            BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞"),
            BotCommand("myid", "–¢–≤–æ–π ID"),
            BotCommand("tictactoe", "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"),
            BotCommand("join", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"),
            BotCommand("legend", "–õ–µ–≥–µ–Ω–¥–∞ —á–∞—Ç–∞"),
            BotCommand("mute", "–ó–∞–º—É—Ç–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("ban", "–ó–∞–±–∞–Ω–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("warn", "–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("userinfo", "–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("unmute", "–†–∞–∑–º—É—Ç–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("unban", "–†–∞–∑–±–∞–Ω–∏—Ç—å (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("clearwarns", "–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∞–¥–º–∏–Ω—ã)"),
            BotCommand("adminhelp", "–ü–æ–º–æ—â—å –∞–¥–º–∏–Ω–∞–º"),
        ]
        
        loop.run_until_complete(application.bot.set_my_commands(commands))
        logger.info("–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        loop.close()
    except Exception as e:
        logger.error(f"–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", rules_command))
    application.add_handler(CommandHandler("rate", exchange_rate))
    application.add_handler(CommandHandler("get_chat_id", get_chat_id))
    application.add_handler(CommandHandler("myid", get_my_id))
    application.add_handler(CommandHandler("stream", check_stream))
    application.add_handler(CommandHandler("legend", legend_command))

    # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("warn", warn_command))
    application.add_handler(CommandHandler("userinfo", user_info_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("clearwarns", clear_warnings_command))
    application.add_handler(CommandHandler("adminhelp", admin_help_command))

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
    application.add_handler(CommandHandler("tictactoe", start_tictactoe))
    application.add_handler(CommandHandler("join", join_tictactoe))
    application.add_handler(CallbackQueryHandler(handle_tictactoe_callback, pattern="^tic_"))

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ /
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–∫—É—Ä—Å$'), exchange_rate))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ø—Ä–∞–≤–∏–ª–∞$'), rules_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ª–µ–≥–µ–Ω–¥–∞ —á–∞—Ç–∞$'), legend_command))

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_message))
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ (–ø—Ä–∞–≤–∏–ª–∞ 9.1, 9.2, 9.3)
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(filters.VIDEO, handle_message))
    application.add_handler(MessageHandler(filters.AUDIO, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_message))
    application.add_handler(MessageHandler(filters.ANIMATION, handle_message))

    # —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    application.job_queue.run_repeating(
        stream_check_job,
        interval=1,
        first=10
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è webhook
    RAILWAY_URL = os.environ.get('RAILWAY_STATIC_URL', 'https://your-app.railway.app')
    webhook_url = f"{RAILWAY_URL}/webhook"
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ Railway —Å webhook: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        url_path="/webhook"
    )

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # Fallback –∫ polling –µ—Å–ª–∏ webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            application = Application.builder().token(token).build()
            logger.info("Fallback –∫ polling...")
            application.run_polling(drop_pending_updates=True)
        except Exception as e2:
            logger.error(f"Polling —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
            exit(1)